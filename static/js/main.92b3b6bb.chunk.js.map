{"version":3,"sources":["YatzySet.ts","Felt.tsx","Række.tsx","ResultatFelt.tsx","LæsRække.tsx","Navne.tsx","Clear.tsx","ButtonBar.tsx","Game.tsx","index.tsx"],"names":["YatzySet","rounds","left","right","r","UpperRound","push","PatternRound","FixedRound","Round","this","l","p","roundsPlayed","console","log","playedRounds","length","i","filter","round","blank","reduce","sum","score","bonus","isTopSet","slice","every","map","cubes","scratched","scrathed","index","element","scratch","forEach","cube","add","c","dice","pop","clear","join","toString","v","kind","pattern","bonusPoints","Array","fill","isAPreviousValue","d","includes","set","Felt","props","TableCell","sx","paddingX","paddingY","minWidth","Button","onClick","variant","CurrentRound","padding","fullWidth","size","Række","TableRow","selected","some","currentRound","align","color","available","Slags","FeltI","ResultatFelt","Value","LæsRække","LæsFeltI","Tal","Navn","paddingTop","TextField","defaultValue","error","valid","helperText","onFocus","event","target","select","inputProps","style","Navne","TableHead","Clear","React","open","setOpen","handleClose","MenuItem","ListItemIcon","fontSize","Dialog","onClose","DialogTitle","DialogActions","autoFocus","screenfull","require","ButtonBar","useState","anchorEl","setAnchorEl","Boolean","AppBar","position","top","bottom","Toolbar","disableGutters","Box","flexGrow","ButtonGroup","Dice","IconButton","edge","backspace","currentTarget","id","MenuListProps","isEnabled","toggle","fontFamily","diceClick","disabled","diceEnabled","Game","sets","clearSets","storedStateJson","localStorage","getItem","allRounds","JSON","parse","setCubes","state","YatzySets","currentSet","setRight","setLeft","setState","player","handleClick","ys","storeBoard","back","setItem","stringify","allCubes","className","canBeNext","addDice","slags","rowFunc","rowRounds","TableContainer","component","Paper","Table","verify","TableBody","række","toArray","removeDice","clearBoard","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92b3b6bb.chunk.js","sourcesContent":["export class YatzySet {\r\n    rounds: Round[];\r\n    left: YatzySet | null;\r\n    right: YatzySet | null;\r\n\r\n    constructor() {\r\n        let r: Round[] = [new UpperRound(1), new UpperRound(2), new UpperRound(3), new UpperRound(4), new UpperRound(5), new UpperRound(6)];\r\n        r.push(new PatternRound([2]));\r\n        r.push(new PatternRound([2, 2]));\r\n        r.push(new PatternRound([2, 2, 2]));\r\n        r.push(new PatternRound([3]));\r\n        r.push(new PatternRound([4]));\r\n        r.push(new PatternRound([3, 3]));\r\n        r.push(new FixedRound([1, 2, 3, 4, 5], 0));\r\n        r.push(new FixedRound([2, 3, 4, 5, 6], 0));\r\n        r.push(new FixedRound([1, 2, 3, 4, 5, 6], 9));\r\n        r.push(new PatternRound([3, 2]));\r\n        r.push(new Round());\r\n        r.push(new PatternRound([6], 100));\r\n        this.rounds = r;\r\n        this.left = null;\r\n        this.right = null;\r\n\r\n    }\r\n\r\n    setLeft(l: YatzySet) {\r\n        this.left = l;\r\n    }\r\n\r\n    setRight(r: YatzySet) {\r\n        this.right = r;\r\n    }\r\n\r\n\r\n    verify() {\r\n        let p = this.roundsPlayed();\r\n        if (this.left !== null && p !== 0) {\r\n            console.log(\"Left: \" + this.left);\r\n            let l = this.left.roundsPlayed();\r\n            console.log(\"p: \" + p + \" l: \" + l);\r\n            if (l !== p && l !== p + 1) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        if (this.right !== null) {\r\n            let r = this.right.roundsPlayed();\r\n            if (r !== 0) {\r\n                if (r !== p - 1 && r !== p) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    roundsPlayed() {\r\n        return this.playedRounds().length;\r\n    }\r\n\r\n    round(i: number): Round {\r\n        return this.rounds[i];\r\n    }\r\n\r\n    score(): number {\r\n        return this.rounds.filter(round => !round.blank()).reduce((sum, round) => sum + round.score(), 0) + this.bonus();\r\n    }\r\n\r\n    bonus(): number {\r\n        return this.isTopSet() && this.rounds.slice(0, 6).reduce((sum, r) => sum + r.score(), 0) >= 0 ? 50 : 0;\r\n    }\r\n\r\n    isTopSet(): boolean {\r\n        const ts = this.rounds.slice(0, 6).every(round => !round.blank());\r\n        return ts;\r\n    }\r\n\r\n    playedRounds(): Round[] {\r\n        return this.rounds.filter(round => !round.blank());\r\n    }\r\n\r\n    allCubes(): RoundState[] {\r\n        return this.rounds.map(r => {\r\n            var state: RoundState = {\r\n                cubes: r.cubes,\r\n                scratched: r.scrathed\r\n\r\n            };\r\n            return state;\r\n        });\r\n    }\r\n\r\n    setCubes(rounds: RoundState[]) {\r\n        for (let index = 0; index < rounds.length; index++) {\r\n            const element = rounds[index];\r\n            if (element.scratched) {\r\n                this.rounds[index].scratch();\r\n            } else {\r\n                element.cubes.forEach(cube => {\r\n                    this.rounds[index].add(cube);\r\n\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport interface RoundState {\r\n    cubes: number[];\r\n    scratched: boolean;\r\n}\r\n\r\nexport class Round {\r\n    cubes: number[];\r\n    scrathed: boolean;\r\n    constructor() {\r\n        this.cubes = [];\r\n        this.scrathed = false;\r\n    }\r\n\r\n    score(): number {\r\n        if (this.scrathed) {\r\n            return 0;\r\n        }\r\n        return this.cubes.reduce((sum, c) => sum + c, 0);\r\n    }\r\n\r\n    blank(): boolean {\r\n        return this.cubes.length === 0 && !this.scrathed;\r\n    }\r\n\r\n    add(dice: number) {\r\n        this.cubes.push(dice);\r\n        this.scrathed = false;\r\n\r\n    }\r\n\r\n    scratch() {\r\n        this.cubes = [];\r\n        this.scrathed = true;\r\n    }\r\n\r\n    clear() {\r\n        this.cubes = [];\r\n        this.scrathed = false;\r\n    }\r\n\r\n    back() {\r\n        this.cubes.pop();\r\n        if (this.scrathed) {\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    toArray(): string {\r\n        return this.cubes.join(\"\");\r\n    }\r\n\r\n    toString(): string {\r\n        if (this.scrathed) {\r\n            return \"X\";\r\n        }\r\n        if (this.blank()) {\r\n            return \"\\xa0\";\r\n        }\r\n        return this.score().toString();\r\n    }\r\n\r\n    bonus(): number {\r\n        return 0;\r\n    }\r\n\r\n    canBeNext(v: number): boolean {\r\n        return this.cubes.length < 6;\r\n    }\r\n\r\n    isIncomplete(): boolean {\r\n        return this.cubes.length > 0 && this.cubes.length < 6;\r\n    }\r\n}\r\n\r\nclass UpperRound extends Round {\r\n    kind: number;\r\n    constructor(kind: number) {\r\n        super();\r\n        this.kind = kind;\r\n    }\r\n\r\n    add(dice: number) {\r\n        if (dice === this.kind) {\r\n            super.add(dice)\r\n        }\r\n    }\r\n\r\n    score(): number {\r\n        return super.score() - 4 * this.kind\r\n    }\r\n\r\n    bouns(): number {\r\n        return this.score()\r\n    }\r\n\r\n    canBeNext(v: number): boolean {\r\n        return super.canBeNext(v) && v === this.kind;\r\n    }\r\n\r\n    isIncomplete(): boolean {\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nclass PatternRound extends Round {\r\n    pattern: number[];\r\n    kind: number[];\r\n    bonusPoints: number;\r\n    index: number;\r\n    constructor(pattern: number[], bonus: number = 0) {\r\n        super();\r\n        this.pattern = pattern;\r\n        this.kind = Array(pattern.length).fill(0);\r\n        this.bonusPoints = bonus;\r\n        this.index = 0;\r\n    }\r\n\r\n    add(dice: number) {\r\n        console.log(\"Adding: \" + dice);\r\n        if (this.isAPreviousValue(dice) || this.index >= this.pattern.length) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.pattern[this.index]; i++) {\r\n            super.add(dice);\r\n        }\r\n        this.kind[this.index] = dice;\r\n        this.index += 1\r\n    }\r\n\r\n    canBeNext(v: number): boolean {\r\n        return super.canBeNext(v) && !this.isAPreviousValue(v) && this.index < this.pattern.length\r\n    }\r\n\r\n    isAPreviousValue(d: number): boolean {\r\n        return this.kind.includes(d);\r\n    }\r\n\r\n    clear() {\r\n        super.clear()\r\n        this.kind = Array(this.pattern.length).fill(0);\r\n        this.index = 0\r\n    }\r\n\r\n    back() {\r\n        if (this.index === 0) {\r\n            this.clear();\r\n            return;\r\n        }\r\n        this.index -= 1;\r\n        this.kind[this.index] = 0;\r\n        for (let i = 0; i < this.pattern[this.index]; i++) {\r\n            super.back();\r\n        }\r\n    }\r\n\r\n    score(): number {\r\n        return (this.index === this.pattern.length ? this.bonusPoints : 0) + super.score();\r\n    }\r\n\r\n    scratch() {\r\n        this.clear()\r\n        super.scratch()\r\n    }\r\n\r\n    isIncomplete(): boolean {\r\n        return this.index !== 0 && this.index < this.pattern.length\r\n    }\r\n}\r\n\r\nclass FixedRound extends Round {\r\n    bonusPoints: number;\r\n    set: boolean;\r\n    pattern: number[];\r\n    constructor(pattern: number[], bonusPoints: number) {\r\n        super();\r\n        this.pattern = pattern;\r\n        this.bonusPoints = bonusPoints;\r\n        this.set = false;\r\n\r\n    }\r\n\r\n    add(dice: number) {\r\n        if (!this.pattern.includes(dice) || this.set) {\r\n            return\r\n        }\r\n        this.pattern.forEach(d => super.add(d));\r\n        this.set = true;\r\n    }\r\n\r\n    canBeNext(v: number): boolean {\r\n        return !this.set && this.pattern.includes(v);\r\n    }\r\n\r\n\r\n    clear() {\r\n        super.clear();\r\n        this.set = false;\r\n    }\r\n\r\n    back() {\r\n        this.pattern.forEach(d => super.back());\r\n        this.set = false;\r\n    }\r\n\r\n    scratch() {\r\n        super.scratch();\r\n        this.set = false;\r\n    }\r\n\r\n    score(): number {\r\n        return (this.set ? this.bonusPoints : 0) + super.score();\r\n    }\r\n\r\n    ssIncomplete(): boolean {\r\n        return false;\r\n    }\r\n\r\n}","import { Button, TableCell } from '@mui/material';\r\nimport { Round } from './YatzySet'\r\n\r\nexport function Felt(props: Props) {\r\n    return (\r\n        <TableCell sx={{paddingX:0, paddingY:0, minWidth: \"10px\"}}>\r\n            <Button onClick={props.onClick} \r\n            variant={props.Round === props.CurrentRound ? \"contained\" : \"text\"}\r\n            sx={{padding: 0, minWidth: 0}}\r\n            fullWidth = {true}\r\n            size=\"small\"\r\n            >\r\n            {props.Round?.toString()+\" \"}\r\n            </Button>\r\n        </TableCell>\r\n    );\r\n}\r\n\r\n\r\ninterface Props {\r\n    onClick: () => void;\r\n    Round: Round;\r\n    CurrentRound: Round;\r\n  }\r\n\r\n","import { TableCell, TableRow } from '@mui/material';\r\nimport React from 'react';\r\nimport { Felt } from './Felt'\r\nimport { Round } from './YatzySet'\r\n\r\nexport function Række(props: Props) {\r\n    return (\r\n        <TableRow selected = {props.rounds.some(r => r === props.currentRound)}\r\n        >\r\n            <TableCell align=\"left\"\r\n                sx={{ color: props.available ? 'text.primary' : 'ghostwhite', \r\n                      paddingY:\"4px\"\r\n            }}\r\n            >\r\n                {props.Slags}\r\n            </TableCell>\r\n            {FeltI(0 , props)}\r\n            {FeltI(1 , props)}\r\n            {FeltI(2 , props)}\r\n            {FeltI(3 , props)}\r\n            {FeltI(4 , props)}\r\n            {FeltI(5 , props)}\r\n\r\n\r\n        </TableRow>\r\n\r\n    );\r\n}\r\n\r\nfunction FeltI(i: number, props: Props) {\r\n    return (\r\n        <Felt onClick={() => props.onClick(i)}\r\n            Round={props.rounds[i]}\r\n            CurrentRound={props.currentRound} />\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    onClick: (i: number) => void;\r\n    rounds: Round[];\r\n    Slags: string;\r\n    available: boolean;\r\n    currentRound: Round;\r\n}\r\n","import { Button, TableCell } from '@mui/material';\r\nexport function ResultatFelt(props: Props) {\r\n    return (\r\n            <TableCell sx={{paddingX:0, paddingY:0, minWidth: \"10px\"}}>\r\n                <Button  \r\n                sx={{padding: 0, minWidth: 0}}\r\n                fullWidth = {true}\r\n                size=\"small\"\r\n                >\r\n                {props.Value}\r\n                </Button>\r\n            </TableCell>\r\n    );\r\n}\r\n\r\n\r\ninterface Props {\r\n    Value: string;\r\n  }\r\n\r\n","import {ResultatFelt} from './ResultatFelt'\r\nimport { TableCell, TableRow } from '@mui/material';\r\n\r\nexport function LæsRække(props: Props) {\r\n    return (\r\n        <TableRow\r\n        >\r\n            <TableCell align=\"left\">\r\n                {props.Slags}\r\n            </TableCell>\r\n            {LæsFeltI(0 , props)}\r\n            {LæsFeltI(1 , props)}\r\n            {LæsFeltI(2 , props)}\r\n            {LæsFeltI(3 , props)}\r\n            {LæsFeltI(4 , props)}\r\n            {LæsFeltI(5 , props)}\r\n\r\n\r\n        </TableRow>\r\n\r\n    );\r\n}\r\n\r\nfunction LæsFeltI(i: number, props: Props){\r\n    return <ResultatFelt Value={props.Tal[i].toString()} />;\r\n\r\n}\r\n\r\ninterface Props {\r\n    Slags: string;\r\n    Tal: number[];\r\n  }\r\n","import { TableCell, TableHead, TableRow, TextField } from '@mui/material';\r\nimport React from 'react';\r\n\r\n\r\ninterface Props {\r\n    valid: boolean[];\r\n}\r\n\r\nfunction Navn(i: number, props: Props) {\r\n    return <TableCell sx={{paddingX:\"1px\", paddingY:\"1px\", minWidth: \"10px\", paddingTop: 0}}>\r\n        <TextField\r\n            variant=\"filled\"\r\n            defaultValue={\"Spiller \" + (i + 1)}\r\n            error={!props.valid[i]}\r\n            size = \"small\"\r\n            helperText={!props.valid[i] ? \"FEJL\" : \"\"}\r\n            onFocus={event => {\r\n                event.target.select();\r\n              }}\r\n              inputProps={{\r\n                style: {\r\n                  padding: 5\r\n                }\r\n             }}\r\n\r\n        />\r\n    </TableCell>\r\n\r\n}\r\n\r\nexport function Navne(props: Props) {\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell size=\"small\" sx={{paddingX:\"1px\", paddingY:\"1px\", minWidth: \"10px\"}}/>\r\n                {Navn(0, props)}\r\n                {Navn(1, props)}\r\n                {Navn(2, props)}\r\n                {Navn(3, props)}\r\n                {Navn(4, props)}\r\n                {Navn(5, props)}\r\n            </TableRow>\r\n        </TableHead >\r\n\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { ListItemIcon, MenuItem } from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\n\r\ninterface Props {\r\n  clear: () => void;\r\n}\r\n\r\nexport default function Clear(props: Props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MenuItem onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n          <DeleteIcon fontSize=\"large\" />\r\n        </ListItemIcon>\r\n      </MenuItem>\r\n\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle >\r\n          {\"Slet spil?\"}\r\n        </DialogTitle>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Nåhr, nej</Button>\r\n          <Button onClick={() => {props.clear(); handleClose()}} autoFocus>Ægte!</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Box from '@mui/material/Box';\r\nimport BackspaceIcon from '@mui/icons-material/Backspace';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport Button from '@mui/material/Button';\r\nimport { ButtonGroup, ListItemIcon } from '@mui/material';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FullscreenIcon from '@mui/icons-material/Fullscreen';\r\nimport Clear from './Clear';\r\n\r\nconst size = \"min(6vw, 1cm)\"\r\nconst screenfull = require('screenfull');\r\n\r\nexport function ButtonBar(props: Props) {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n\r\n        \r\n    };\r\n\r\n    // enabling fullscreen has to be done after some user input\r\n    const toggleFullScreen = () => {\r\n        if (screenfull.isEnabled) {\r\n            screenfull.toggle();\r\n        }\r\n    };\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" sx={{ top: 'auto', bottom: 0 }}>\r\n            <Toolbar disableGutters={true}>\r\n                <Box sx={{ flexGrow: 1 }} />\r\n                <ButtonGroup variant=\"text\" size=\"small\">\r\n                    {Dice(1, props)}\r\n                    {Dice(2, props)}\r\n                    {Dice(3, props)}\r\n                    {Dice(4, props)}\r\n                    {Dice(5, props)}\r\n                    {Dice(6, props)}\r\n                    <IconButton color=\"inherit\" edge='start' onClick={() => props.scratch()}>\r\n                        <ClearIcon style={{ fontSize: size }} />\r\n                    </IconButton>\r\n                    <IconButton color=\"inherit\" edge='start' onClick={() => props.backspace()}>\r\n                        <BackspaceIcon style={{ fontSize: size }} />\r\n                    </IconButton>\r\n                    <IconButton color=\"inherit\" edge='start' onClick={handleClick}>\r\n                        <MenuIcon style={{ fontSize: size }} />\r\n                    </IconButton>\r\n                </ButtonGroup>\r\n                <Menu\r\n                    id=\"basic-menu\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    MenuListProps={{\r\n                        'aria-labelledby': 'basic-button',\r\n                    }}\r\n                >\r\n                   <Clear clear={props.clear}/>\r\n                    <MenuItem onClick={() => {toggleFullScreen(); handleClose() }}>\r\n                        <ListItemIcon>\r\n                            <FullscreenIcon fontSize=\"large\" />\r\n                        </ListItemIcon>\r\n                    </MenuItem>\r\n                </Menu>\r\n                <Box sx={{ flexGrow: 1 }} />\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n\r\n}\r\n\r\nfunction Dice(i: number, props: Props) {\r\n    return (<Button\r\n        variant=\"contained\"\r\n        sx={{ fontSize: size, fontFamily: 'Mogens Dice' }}\r\n        onClick={() => props.diceClick(i)}\r\n        disabled={!props.diceEnabled(i)}\r\n        size='small'\r\n    >\r\n        {i}\r\n    </Button>);\r\n}\r\n\r\ninterface Props {\r\n    diceClick: (i: number) => void;\r\n    diceEnabled: (i: number) => boolean;\r\n    backspace: () => void;\r\n    scratch: () => void;\r\n    clear: () => void;\r\n}\r\n","import React from 'react';\r\nimport { Round, YatzySet, RoundState } from './YatzySet';\r\nimport { Række } from './Række';\r\nimport { LæsRække } from './LæsRække';\r\nimport { Navne } from \"./Navne\";\r\nimport { ReactElement } from 'react';\r\nimport { ButtonBar } from './ButtonBar';\r\nimport { Paper, Table, TableBody, TableContainer } from '@mui/material';\r\n\r\n\r\n\r\ninterface State {\r\n    YatzySets: YatzySet[];\r\n    currentSet: YatzySet;\r\n    currentRound: Round;\r\n}\r\n\r\n\r\nexport class Game extends React.Component<{}, State> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        let sets = this.clearSets();\r\n        let storedStateJson = localStorage.getItem('MogensYatzy');\r\n        if (storedStateJson !== null) {\r\n            var allRounds: RoundState[][] = JSON.parse(storedStateJson);\r\n\r\n            console.log(\"Board loaded\");\r\n\r\n            for (let index = 0; index < allRounds.length; index++) {\r\n                const element = allRounds[index];\r\n                sets[index].setCubes(element);\r\n            }\r\n\r\n        }\r\n        this.state = {\r\n            YatzySets: sets,\r\n            currentSet: sets[0],\r\n            currentRound: sets[0].round(0),\r\n        };\r\n    }\r\n\r\n    clearSets(): YatzySet[] {\r\n        let sets = Array(6).fill(null).map(() => new YatzySet());\r\n        for (let index = 1; index < sets.length; index++) {\r\n            const left = sets[index - 1];\r\n            const right = sets[index];\r\n            left.setRight(right);\r\n            right.setLeft(left);\r\n        }\r\n        return sets;\r\n    }\r\n\r\n    handleClick(p: number, r: number) {\r\n        console.log(\"Call back player: \" + p + \" round: \" + r);\r\n        var set = this.state.YatzySets[p];\r\n        var round = set.round(r);\r\n        this.setState({\r\n            YatzySets: this.state.YatzySets,\r\n            currentSet: set,\r\n            currentRound: round\r\n        });\r\n\r\n    }\r\n\r\n    rowFunc(round: number): (p: number) => void {\r\n        return (player) => this.handleClick(player, round);\r\n    }\r\n\r\n    rowRounds(i: number): Round[] {\r\n        let result = this.state.YatzySets.map(ys => ys.round(i));\r\n        return result;\r\n    }\r\n\r\n    addDice(i: number) {\r\n        this.state.currentRound.add(i);\r\n        this.setState(this.state);\r\n        this.storeBoard();\r\n    }\r\n\r\n    removeDice() {\r\n        console.log(\"Back\");\r\n        this.state.currentRound.back();\r\n        this.setState(this.state);\r\n        this.storeBoard();\r\n    }\r\n\r\n    scratch() {\r\n        console.log(\"Scratch\");\r\n        this.state.currentRound.scratch();\r\n        this.setState(this.state);\r\n        this.storeBoard();\r\n    }\r\n\r\n    clearBoard() {\r\n        console.log(\"Clear board\");\r\n        const sets = this.clearSets();\r\n        this.setState({\r\n            YatzySets: sets,\r\n            currentSet: sets[0],\r\n            currentRound: sets[0].round(0),\r\n        });\r\n        this.storeBoard(sets);\r\n\r\n    }\r\n\r\n    storeBoard(sets: YatzySet[] | null = null) {\r\n        console.log(\"Store board\");\r\n        if (sets == null) {\r\n            sets = this.state.YatzySets;\r\n        }\r\n        localStorage.setItem(\"MogensYatzy\", JSON.stringify(sets.map(ys => ys.allCubes())));\r\n    }\r\n\r\n\r\n    terning(i: number) {\r\n        return (\r\n            <button className=\"terning\"\r\n                disabled={!this.state.currentRound.canBeNext(i)}\r\n                onClick={() => this.addDice(i)}>\r\n                {i}\r\n            </button>\r\n        );\r\n    }\r\n\r\n    række(round: number, slags: string): ReactElement {\r\n        return <Række Slags={slags}\r\n            onClick={this.rowFunc(round)} rounds={this.rowRounds(round)}\r\n            available={this.state.currentSet.rounds[round].blank()}\r\n            currentRound={this.state.currentRound} />;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table size=\"small\" sx={{ minWidth: 200 }} aria-label=\"simple table\">\r\n                        <Navne valid={this.state.YatzySets.map(ys => ys.verify())} />\r\n                        <TableBody>\r\n                            {this.række(0, \"1\")}\r\n                            {this.række(1, \"2\")}\r\n                            {this.række(2, \"3\")}\r\n                            {this.række(3, \"4\")}\r\n                            {this.række(4, \"5\")}\r\n                            {this.række(5, \"6\")}\r\n                            <LæsRække Slags=\"Bonus\" Tal={this.state.YatzySets.map(ys => ys.bonus())}></LæsRække>\r\n                            {this.række(6, \"1 par\")}\r\n                            {this.række(7, \"2 par\")}\r\n                            {this.række(8, \"3 par\")}\r\n                            {this.række(9, \"3 ens\")}\r\n                            {this.række(10, \"4 ens\")}\r\n                            {this.række(11, \"2 x 3 ens\")}\r\n                            {this.række(12, \"Lav\")}\r\n                            {this.række(13, \"Høj\")}\r\n                            {this.række(14, \"Cameron\")}\r\n                            {this.række(15, \"Hus\")}\r\n                            {this.række(16, \"Chance\")}\r\n                            {this.række(17, \"Yatzy\")}\r\n                            <LæsRække Slags=\"Total\" Tal={this.state.YatzySets.map(ys => ys.score())}></LæsRække>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <div className=\"nederst\">\r\n                    <div className=\"slag\">\r\n                        {this.state.currentRound.toArray()}\r\n                    </div>\r\n\r\n                </div>\r\n                <ButtonBar diceClick={(i: number) => { this.addDice(i) }}\r\n                    diceEnabled={i => this.state.currentRound.canBeNext(i)}\r\n                    backspace={() => this.removeDice()}\r\n                    scratch={() => this.scratch()}\r\n                    clear={() => this.clearBoard()}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Game } from './Game';\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}