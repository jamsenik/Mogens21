{"version":3,"sources":["yatzy.js","index.js"],"names":["YatzySet","playerId","this","r","UpperRound","push","PatternRound","FixedRound","Round","rounds","left","right","l","p","roundsPlayed","console","log","playedRounds","length","i","filter","round","blank","reduce","sum","score","bonus","isTopSet","slice","every","cubes","scrathed","c","dice","pop","clear","join","v","kind","pattern","Array","fill","index","isAPreviousValue","count","d","includes","set","forEach","Række","props","className","available","Slags","Felt","onClick","Value","toString","Valgt","currentRound","LæsRække","Tal","Mellemrum","Navne","type","valid","Board","player","sets","map","setRight","setLeft","state","YatzySets","currentSet","setState","handleClick","ys","add","back","scratch","disabled","canBeNext","addDice","slags","rowFunc","rowRounds","anders","verify","række","toArray","terning","removeDice","React","Component","screenfull","require","FullScreenToggle","toggleFullScreen","isEnabled","toggle","on","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a96b74ed.chunk.js","sourcesContent":["export class YatzySet {\r\n    // let BONUS = 50;\r\n\r\n    // var Rounds: [Round]\r\n    // var Left: YatzySet?\r\n    // var Right: YatzySet?\r\n    // var PlayerName : String = \"\"\r\n    constructor(playerId){\r\n        this.playerId = playerId;\r\n        let r = [new UpperRound(1), new UpperRound(2), new UpperRound(3), new UpperRound(4), new UpperRound(5), new UpperRound(6)];\r\n        r.push(new PatternRound([2]));\r\n        r.push(new PatternRound([2, 2]));\r\n        r.push(new PatternRound([2, 2, 2]));\r\n        r.push(new PatternRound([3]));\r\n        r.push(new PatternRound([4]));\r\n        r.push(new PatternRound([3, 3]));\r\n        r.push(new FixedRound([1, 2, 3, 4, 5], 0));\r\n        r.push(new FixedRound([2, 3, 4, 5, 6], 0));\r\n        r.push(new FixedRound([1, 2, 3, 4, 5, 6], 9));\r\n        r.push(new PatternRound([3, 2]));\r\n        r.push(new Round());\r\n        r.push(new PatternRound([6], 100));\r\n        this.rounds = r;\r\n        this.left = null;\r\n        this.right = null;\r\n\r\n    }   \r\n\r\n    setLeft(l){\r\n        this.left = l;\r\n    }\r\n\r\n    setRight(r){\r\n        this.right = r;\r\n    }\r\n\r\n\r\n    verify() {\r\n        let p = this.roundsPlayed();\r\n        if (this.left !== null && p !== 0){\r\n            console.log(\"Left: \" + this.left);\r\n            let l = this.left.roundsPlayed();\r\n            console.log(\"p: \" + p + \" l: \" + l);\r\n            if (l !== p && l !== p + 1) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        if (this.right !== null){\r\n            let r = this.right.roundsPlayed();\r\n            if (r !== 0){\r\n                if (r !== p - 1 && r !== p){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    roundsPlayed() {\r\n        return this.playedRounds().length;\r\n    }\r\n\r\n    round(i){\r\n        return this.rounds[i];\r\n    }\r\n\r\n    score(){\r\n        return this.rounds.filter(round => !round.blank()).reduce((sum, round) => sum + round.score(), 0) + this.bonus();\r\n    }\r\n \r\n    bonus(){\r\n        return this.isTopSet() && this.rounds.slice(0,6).reduce((sum, r) => sum + r.score(), 0) >= 0 ? 50 : 0;\r\n    }\r\n\r\n    isTopSet(){\r\n        const ts = this.rounds.slice(0, 6).every(round => !round.blank());\r\n        return ts;\r\n    }\r\n\r\n    playedRounds() {\r\n        return this.rounds.filter(round => !round.blank());\r\n    }\r\n\r\n    anders(){\r\n        return this.playerId;\r\n    }\r\n    // func PlayedTopRounds() -> [Round] {\r\n    //     return Rounds[0...5].filter({!$0.Blank()})\r\n    // }\r\n\r\n    // class func  MaxInput(play : Int) -> Int {\r\n    //     return 4\r\n    // }\r\n}\r\n\r\nclass Round {\r\n    constructor() {\r\n        this.cubes = [];\r\n        this.scrathed = false;\r\n    }\r\n\r\n    score() {\r\n        if (this.scrathed) {\r\n            return 0;\r\n        }\r\n        return this.cubes.reduce((sum, c) => sum + c, 0);\r\n    }\r\n\r\n    blank(){\r\n        return this.cubes.length === 0 && !this.scrathed;\r\n    }\r\n\r\n    add(dice){\r\n        this.cubes.push(dice);\r\n        this.scrathed = false;\r\n\r\n    }\r\n\r\n    scratch(){\r\n        this.cubes = [];\r\n        this.scrathed = true;\r\n    }\r\n\r\n    clear() {\r\n        this.cubes = [];\r\n        this.scrathed = false;\r\n    }\r\n\r\n    back() {\r\n        this.cubes.pop();\r\n        if (this.scrathed){\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    toArray() {\r\n        return this.cubes.join(\"\");\r\n    }\r\n\r\n    toString(){\r\n        if(this.scrathed){\r\n            return \"X\";\r\n        }\r\n        if(this.blank()){\r\n            return \"\";\r\n        }\r\n        return this.score();\r\n    }\r\n\r\n    bonus(){\r\n        return 0;\r\n    }\r\n\r\n    canBeNext(v){\r\n        return this.cubes.length < 6;\r\n    }\r\n\r\n    isIncomplete(){\r\n        return this.cubes.length > 0 && this.cubes.length < 6;\r\n    }\r\n}\r\n\r\nclass UpperRound extends Round {\r\n    constructor(kind) {\r\n        super();\r\n        this.kind = kind;\r\n    }\r\n\r\n    add(dice){\r\n        if (dice === this.kind) {\r\n            super.add(dice)\r\n        }\r\n    }\r\n    \r\n    score(){\r\n        \r\n        return super.score() - 4 * this.kind\r\n    }\r\n    \r\n    bouns(){\r\n        return this.score()\r\n    }\r\n\r\n    canBeNext(v){\r\n        return super.canBeNext(v) && v === this.kind;\r\n    }\r\n    \r\n    isIncomplete(){\r\n        return false;\r\n    }\r\n    \r\n}\r\n\r\nclass PatternRound extends Round{\r\n    constructor(pattern, bonus = 0) {\r\n        super();\r\n        this.pattern = pattern;\r\n        this.kind = Array(pattern.length).fill(0);\r\n        this.bonus = bonus;\r\n        this.index = 0;\r\n    }\r\n    \r\n    add(dice){\r\n        console.log(\"Adding: \" + dice);\r\n        if (this.isAPreviousValue(dice) || this.index >= this.pattern.count){\r\n            return\r\n        }\r\n        for (let i = 0; i < this.pattern[this.index]; i++){\r\n            super.add(dice);\r\n        }\r\n        this.kind[this.index] = dice;\r\n        this.index += 1\r\n    }\r\n    \r\n    canBeNext(v){\r\n        return super.canBeNext(v) && !this.isAPreviousValue(v) && this.index < this.pattern.length\r\n    }\r\n    \r\n    isAPreviousValue(d) {\r\n        return this.kind.includes(d)\r\n    }\r\n    \r\n    clear(){\r\n        super.clear()\r\n        this.kind = Array(this.pattern.length).fill(0)\r\n        this.index = 0\r\n    }\r\n    \r\n    back(){\r\n        if (this.index ===  0){\r\n            this.clear();\r\n            return;\r\n        }\r\n        this.index -= 1;\r\n        this.kind[this.index] = 0;\r\n        for (let i = 0; i < this.pattern[this.index]; i++){\r\n            super.back();\r\n        }\r\n    }\r\n    \r\n    score(){\r\n         return (this.index === this.pattern.length ? this.bonus : 0 ) + super.score();\r\n    }\r\n\r\n    scratch() {\r\n        this.clear()\r\n        super.scratch()\r\n    }\r\n    \r\n    isIncomplete() {\r\n        return this.index !== 0 && this.index < this.pattern.length\r\n    }\r\n}\r\n\r\nclass FixedRound extends Round{\r\n    // let pattern : [Int]\r\n    // var set = false\r\n    // var bonus = 0\r\n    \r\n    constructor(pattern, bonus) {\r\n        super();\r\n        this.pattern = pattern;\r\n        this.bonus = bonus;\r\n        this.set = false;\r\n        \r\n    }\r\n    \r\n    add(dice){\r\n        if (!this.pattern.includes(dice) || this.set){\r\n            return\r\n        }\r\n        this.pattern.forEach(d => super.add(d));\r\n        this.set = true;\r\n    }\r\n    \r\n    canBeNext(v){\r\n        return !this.set && this.pattern.includes(v);\r\n    }\r\n    \r\n    \r\n    clear(){\r\n        super.clear();\r\n        this.set = false;\r\n    }\r\n    \r\n    back(){\r\n        this.pattern.forEach(d => super.back());\r\n        this.set = false;\r\n    }\r\n    \r\n    scratch() {\r\n        super.scratch();\r\n        this.set = false;\r\n    }\r\n    \r\n    score(){\r\n        return (this.set ? this.bonus : 0) + super.score();\r\n    }\r\n    \r\n    ssIncomplete(){\r\n        return false;\r\n    }\r\n    \r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { YatzySet } from './yatzy.js';\r\n\r\nfunction Række(props) {\r\n    return (\r\n        <div className=\"række\">\r\n            <span className={(props.available ? \"etiket\" : \"etiket brugt\")} >\r\n                {props.Slags}\r\n            </span>\r\n            <Felt onClick={() => props.onClick(0)} Value={props.rounds?.[0].toString()} Valgt={props.currentRound === props.rounds?.[0]} />\r\n            <Felt onClick={() => props.onClick(1)} Value={props.rounds?.[1].toString()} Valgt={props.currentRound === props.rounds?.[1]}/>\r\n            <Felt onClick={() => props.onClick(2)} Value={props.rounds?.[2].toString()} Valgt={props.currentRound === props.rounds?.[2]}/>\r\n            <Felt onClick={() => props.onClick(3)} Value={props.rounds?.[3].toString()} Valgt={props.currentRound === props.rounds?.[3]}/>\r\n            <Felt onClick={() => props.onClick(4)} Value={props.rounds?.[4].toString()} Valgt={props.currentRound === props.rounds?.[4]}/>\r\n            <Felt onClick={() => props.onClick(5)} Value={props.rounds?.[5].toString()} Valgt={props.currentRound === props.rounds?.[5]}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LæsRække(props) {\r\n    return (\r\n        <div className=\"række\">\r\n            <span className=\"etiket\"> {props.Slags}</span>\r\n            <Felt Value={props.Tal[0]}> </Felt>\r\n            <Felt Value={props.Tal[1]}> </Felt>\r\n            <Felt Value={props.Tal[2]}> </Felt>\r\n            <Felt Value={props.Tal[3]}> </Felt>\r\n            <Felt Value={props.Tal[4]}> </Felt>\r\n            <Felt Value={props.Tal[5]}> </Felt>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Mellemrum(props) {\r\n    return (\r\n        <div className=\"mellemrum\">\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Navne(props) {\r\n    return (\r\n        <div className=\"øverst\">\r\n            <span className=\"etiket\"> Navn</span>\r\n            <input type=\"text\" className={\"felt navn\" + (props.valid[0] ? \"\" : \" fejl\")}></input>\r\n            <input type=\"text\" className={\"felt navn\" + (props.valid[1] ? \"\" : \" fejl\")}></input>\r\n            <input type=\"text\" className={\"felt navn\" + (props.valid[2] ? \"\" : \" fejl\")}></input>\r\n            <input type=\"text\" className={\"felt navn\" + (props.valid[3] ? \"\" : \" fejl\")}></input>\r\n            <input type=\"text\" className={\"felt navn\" + (props.valid[4] ? \"\" : \" fejl\")}></input>\r\n            <input type=\"text\" className={\"felt navn\" + (props.valid[5] ? \"\" : \" fejl\")}></input>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction Felt(props) {\r\n    return (\r\n        <button\r\n            onClick={props.onClick}\r\n            className={props.Valgt ? \"felt valgt\" : \"felt\"}\r\n        >\r\n            {props.Value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var player = 0;\r\n        let sets = Array(6).fill(null).map(() => new YatzySet(player++));\r\n        for (let index = 1; index < sets.length; index++) {\r\n            const left = sets[index-1];\r\n            const right = sets[index];\r\n            left.setRight(right);\r\n            right.setLeft(left);\r\n        }\r\n        this.state = {\r\n            YatzySets: sets,\r\n            currentSet: sets[0],\r\n            currentRound: sets[0].round(0),\r\n\r\n        }\r\n    }\r\n\r\n    handleClick(p, r) {\r\n        console.log(\"Call back player: \" + p + \" round: \" + r);\r\n        var set = this.state.YatzySets[p];\r\n        var round = set.round(r);\r\n        this.setState({\r\n            YatzySets: this.state.YatzySets,\r\n            currentSet: set,\r\n            currentRound: round\r\n        });\r\n    }\r\n\r\n    rowFunc(round) {\r\n        return (player) => this.handleClick(player, round)\r\n    }\r\n\r\n    rowRounds(i) {\r\n        let result = this.state.YatzySets.map(ys => ys.round(i));\r\n        return result;\r\n    }\r\n\r\n    addDice(i) {\r\n        this.state.currentRound.add(i);\r\n        this.setState(this.state);\r\n    }\r\n\r\n    removeDice() {\r\n        console.log(\"Back\");\r\n        this.state.currentRound.back();\r\n        this.setState(this.state);\r\n    }\r\n\r\n    scratch() {\r\n        console.log(\"Scratch\");\r\n        this.state.currentRound.scratch();\r\n        this.setState(this.state);\r\n\r\n    }\r\n\r\n    terning(i) {\r\n        return <button className=\"terning\" disabled={!this.state.currentRound.canBeNext(i)} onClick={() => this.addDice(i)}>{i}</button>\r\n\r\n    }\r\n\r\n    række(round, slags) {\r\n        return <Række Slags={slags}\r\n            onClick={this.rowFunc(round)} rounds={this.rowRounds(round)}\r\n            available={this.state.currentSet.rounds[round].blank()}\r\n            currentRound={this.state.currentRound} />\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"blok\">\r\n                    <Navne playerId={this.state.currentSet.anders()} \r\n                           valid={this.state.YatzySets.map(ys => ys.verify())}\r\n                    />\r\n                    {this.række(0, \"1\")}\r\n                    {this.række(1, \"2\")}\r\n                    {this.række(2, \"3\")}\r\n                    {this.række(3, \"4\")}\r\n                    {this.række(4, \"5\")}\r\n                    {this.række(5, \"6\")}\r\n                    <Mellemrum />\r\n                    <LæsRække Slags=\"Bonus\" Tal={this.state.YatzySets.map(ys => ys.bonus())}></LæsRække>\r\n                    <Mellemrum />\r\n                    {this.række(6, \"1 par\")}\r\n                    {this.række(7, \"2 par\")}\r\n                    {this.række(8, \"3 par\")}\r\n                    {this.række(9, \"3 ens\")}\r\n                    {this.række(10, \"4 ens\")}\r\n                    {this.række(11, \"2 x 3 ens\")}\r\n                    {this.række(12, \"Lav\")}\r\n                    {this.række(13, \"Høj\")}\r\n                    {this.række(14, \"Cameron\")}\r\n                    {this.række(15, \"Hus\")}\r\n                    {this.række(16, \"Chance\")}\r\n                    {this.række(17, \"Yatzy\")}\r\n                    <Mellemrum />\r\n                    <LæsRække Slags=\"Total\" Tal={this.state.YatzySets.map(ys => ys.score())}></LæsRække>\r\n\r\n                </div>\r\n                <div className=\"nederst\">\r\n                    <div className=\"slag\">\r\n                        {this.state.currentRound.toArray()}\r\n                    </div>\r\n                    <div className=\"knaplinje\">\r\n                        {this.terning(1)}\r\n                        {this.terning(2)}\r\n                        {this.terning(3)}\r\n                        {this.terning(4)}\r\n                        {this.terning(5)}\r\n                        {this.terning(6)}\r\n                        <button className=\"terning\" onClick={() => this.scratch()}>X</button>\r\n                        <button className=\"terning\" disabled={this.state.currentRound.blank()} onClick={() => this.removeDice()}>&lt;</button>\r\n                        <FullScreenToggle />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst screenfull = require('screenfull');\r\n\r\nclass FullScreenToggle extends React.Component {\r\n    componentDidMount() {\r\n        if (screenfull.isEnabled) {\r\n            screenfull.on('change', () => {\r\n                //   console.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');\r\n            });\r\n        }\r\n    }\r\n\r\n    // enabling fullscreen has to be done after some user input\r\n    toggleFullScreen = () => {\r\n        if (screenfull.isEnabled) {\r\n            screenfull.toggle();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"terning\" onClick={this.toggleFullScreen}>&#x26F6; </button>\r\n        )\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Board />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     window.addEventListener('beforeunload', this.beforeunload.bind(this));\r\n    // }\r\n\r\n    // componentWillUnmount() {\r\n    //     window.removeEventListener('beforeunload', this.beforeunload.bind(this));\r\n    // }\r\n\r\n    // beforeunload(e) {\r\n    //     console.log('Before unload');\r\n    //     e.preventDefault();\r\n    //     e.returnValue = true;\r\n    // }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}