{"version":3,"sources":["yatzy.js","index.js"],"names":["YatzySet","playerId","this","r","UpperRound","push","PatternRound","FixedRound","Round","rounds","p","roundsPlayed","left","l","right","rlayedRounds","length","i","filter","round","blank","reduce","sum","score","bonus","isTopSet","slice","every","cubes","scrathed","c","dice","pop","clear","join","v","kind","pattern","Array","fill","index","console","log","isAPreviousValue","count","d","includes","set","forEach","Række","props","className","valgt","available","Slags","Felt","onClick","Value","toString","LæsRække","Tal","Mellemrum","Navne","type","Board","player","sets","map","state","YatzySets","currentSet","currentRound","setState","handleClick","ys","add","back","scratch","disabled","canBeNext","addDice","slags","rowFunc","rowRounds","anders","række","toArray","terning","removeDice","React","Component","screenfull","require","FullScreenToggle","toggleFullScreen","isEnabled","toggle","on","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7757c8f.chunk.js","sourcesContent":["export class YatzySet {\r\n    // let BONUS = 50;\r\n\r\n    // var Rounds: [Round]\r\n    // var Left: YatzySet?\r\n    // var Right: YatzySet?\r\n    // var PlayerName : String = \"\"\r\n    constructor(playerId){\r\n        this.playerId = playerId;\r\n        let r = [new UpperRound(1), new UpperRound(2), new UpperRound(3), new UpperRound(4), new UpperRound(5), new UpperRound(6)];\r\n        r.push(new PatternRound([2]));\r\n        r.push(new PatternRound([2, 2]));\r\n        r.push(new PatternRound([2, 2, 2]));\r\n        r.push(new PatternRound([3]));\r\n        r.push(new PatternRound([4]));\r\n        r.push(new PatternRound([3, 3]));\r\n        r.push(new FixedRound([1, 2, 3, 4, 5], 0));\r\n        r.push(new FixedRound([2, 3, 4, 5, 6], 0));\r\n        r.push(new FixedRound([1, 2, 3, 4, 5, 6], 9));\r\n        r.push(new PatternRound([3, 2]));\r\n        r.push(new Round());\r\n        r.push(new PatternRound([6], 100));\r\n        this.rounds = r;\r\n\r\n    }\r\n    // init(){\r\n    //     Rounds = Array()\r\n    //     for r in 1...6 {\r\n    //         Rounds.append(UpperRound(kind: r))\r\n    //     }\r\n    //     Rounds.append(PatternRound(pattern: [2]))\r\n    //     Rounds.append(PatternRound(pattern: [2, 2]))\r\n    //     Rounds.append(PatternRound(pattern: [2, 2, 2]))\r\n    //     Rounds.append(PatternRound(pattern: [3]))\r\n    //     Rounds.append(PatternRound(pattern: [4]))\r\n    //     Rounds.append(PatternRound(pattern: [3, 3]))\r\n    //     Rounds.append(FixedRound(pattern: [1, 2, 3, 4, 5]))\r\n    //     Rounds.append(FixedRound(pattern: [2, 3, 4, 5, 6]))\r\n    //     Rounds.append(FixedRound(pattern: [1, 2, 3, 4, 5, 6], bonus: 9))\r\n    //     Rounds.append(PatternRound(pattern: [3, 2]))\r\n    //     Rounds.append(Round())\r\n    //     Rounds.append(PatternRound(pattern: [6], bonus: 100))\r\n    // }\r\n\r\n    verify() {\r\n        let p = this.roundsPlayed();\r\n        if (this.left !== null && p != 0){\r\n            let l = this.left.roundsPlayed()\r\n            if (l !== p && l !== p + 1) {\r\n                return false\r\n            }\r\n        }\r\n\r\n\r\n        if (this.right !== null){\r\n            let r = this.right.roundsPlayed();\r\n            if (r != 0){\r\n                if (r !== p - 1 && r !== p){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    roundsPlayed() {\r\n        return this.rlayedRounds().length;\r\n    }\r\n\r\n    round(i){\r\n        return this.rounds[i];\r\n    }\r\n\r\n    score(){\r\n        return this.rounds.filter(round => !round.blank()).reduce((sum, round) => sum + round.score(), 0) + this.bonus();\r\n    }\r\n \r\n    bonus(){\r\n        return this.isTopSet() && this.rounds.slice(0,6).reduce((sum, r) => sum + r.score(), 0) >= 0 ? 50 : 0;\r\n    }\r\n\r\n    isTopSet(){\r\n        const ts = this.rounds.slice(0, 6).every(round => !round.blank());\r\n        return ts;\r\n    }\r\n\r\n    playedRounds() {\r\n        return this.rounds.filter(round => !round.blank()).length;\r\n    }\r\n\r\n    anders(){\r\n        return this.playerId;\r\n    }\r\n    // func PlayedTopRounds() -> [Round] {\r\n    //     return Rounds[0...5].filter({!$0.Blank()})\r\n    // }\r\n\r\n    // class func  MaxInput(play : Int) -> Int {\r\n    //     return 4\r\n    // }\r\n}\r\n\r\nclass Round {\r\n    constructor() {\r\n        this.cubes = [];\r\n        this.scrathed = false;\r\n    }\r\n\r\n    score() {\r\n        if (this.scrathed) {\r\n            return 0;\r\n        }\r\n        return this.cubes.reduce((sum, c) => sum + c, 0);\r\n    }\r\n\r\n    blank(){\r\n        return this.cubes.length === 0 && !this.scrathed;\r\n    }\r\n\r\n    add(dice){\r\n        this.cubes.push(dice);\r\n        this.scrathed = false;\r\n\r\n    }\r\n\r\n    scratch(){\r\n        this.cubes = [];\r\n        this.scrathed = true;\r\n    }\r\n\r\n    clear() {\r\n        this.cubes = [];\r\n        this.scrathed = false;\r\n    }\r\n\r\n    back() {\r\n        this.cubes.pop();\r\n        if (this.scrathed){\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    toArray() {\r\n        return this.cubes.join(\"\");\r\n    }\r\n\r\n    toString(){\r\n        if(this.scrathed){\r\n            return \"X\";\r\n        }\r\n        if(this.blank()){\r\n            return \"\";\r\n        }\r\n        return this.score();\r\n    }\r\n\r\n    bonus(){\r\n        return 0;\r\n    }\r\n\r\n    canBeNext(v){\r\n        return this.cubes.length < 6;\r\n    }\r\n\r\n    isIncomplete(){\r\n        return false;\r\n    }\r\n}\r\n\r\nclass UpperRound extends Round {\r\n    constructor(kind) {\r\n        super();\r\n        this.kind = kind;\r\n    }\r\n\r\n    add(dice){\r\n        if (dice === this.kind) {\r\n            super.add(dice)\r\n        }\r\n    }\r\n    \r\n    score(){\r\n        \r\n        return super.score() - 4 * this.kind\r\n    }\r\n    \r\n    bouns(){\r\n        return this.score()\r\n    }\r\n\r\n    canBeNext(v){\r\n        return super.canBeNext(v) && v === this.kind;\r\n    }\r\n    \r\n}\r\n\r\nclass PatternRound extends Round{\r\n    constructor(pattern, bonus = 0) {\r\n        super();\r\n        this.pattern = pattern;\r\n        this.kind = Array(pattern.length).fill(0);\r\n        this.bonus = bonus;\r\n        this.index = 0;\r\n    }\r\n    \r\n    add(dice){\r\n        console.log(\"Adding: \" + dice);\r\n        if (this.isAPreviousValue(dice) || this.index >= this.pattern.count){\r\n            return\r\n        }\r\n        for (let i = 0; i < this.pattern[this.index]; i++){\r\n            super.add(dice);\r\n        }\r\n        this.kind[this.index] = dice;\r\n        this.index += 1\r\n    }\r\n    \r\n    canBeNext(v){\r\n        return super.canBeNext(v) && !this.isAPreviousValue(v) && this.index < this.pattern.length\r\n    }\r\n    \r\n    isAPreviousValue(d) {\r\n        return this.kind.includes(d)\r\n    }\r\n    \r\n    clear(){\r\n        super.clear()\r\n        this.kind = Array(this.pattern.length).fill(0)\r\n        this.index = 0\r\n    }\r\n    \r\n    back(){\r\n        if (this.index ===  0){\r\n            this.clear();\r\n            return;\r\n        }\r\n        this.index -= 1;\r\n        this.kind[this.index] = 0;\r\n        for (let i = 0; i < this.pattern[this.index]; i++){\r\n            super.back();\r\n        }\r\n    }\r\n    \r\n    score(){\r\n         return (this.index === this.pattern.length ? this.bonus : 0 ) + super.score();\r\n    }\r\n\r\n    scratch() {\r\n        this.clear()\r\n        super.scratch()\r\n    }\r\n    \r\n    isIncomplete() {\r\n        return this.index !== 0 && this.index < this.pattern.length\r\n    }\r\n}\r\n\r\nclass FixedRound extends Round{\r\n    // let pattern : [Int]\r\n    // var set = false\r\n    // var bonus = 0\r\n    \r\n    constructor(pattern, bonus) {\r\n        super();\r\n        this.pattern = pattern;\r\n        this.bonus = bonus;\r\n        this.set = false;\r\n        \r\n    }\r\n    \r\n    add(dice){\r\n        if (!this.pattern.includes(dice) || this.set){\r\n            return\r\n        }\r\n        this.pattern.forEach(d => super.add(d));\r\n        this.set = true;\r\n    }\r\n    \r\n    canBeNext(v){\r\n        return !this.set && this.pattern.includes(v);\r\n    }\r\n    \r\n    \r\n    clear(){\r\n        super.clear();\r\n        this.set = false;\r\n    }\r\n    \r\n    back(){\r\n        this.pattern.forEach(d => super.back());\r\n        this.set = false;\r\n    }\r\n    \r\n    scratch() {\r\n        super.scratch();\r\n        this.set = false;\r\n    }\r\n    \r\n    score(){\r\n        return (this.set ? this.bonus : 0) + super.score();\r\n    }\r\n    \r\n    ssIncomplete(){\r\n        return false;\r\n    }\r\n    \r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { YatzySet } from './yatzy.js';\r\n\r\nfunction Række(props) {\r\n    return (\r\n        <div className={props.valgt ? \"række valgt\" : \"række\"}>\r\n            <span className={(props.available ? \"etiket\" : \"etiket brugt\")} >\r\n                {props.Slags}\r\n            </span>\r\n            <Felt onClick={() => props.onClick(0)} Value={props.rounds?.[0].toString()} />\r\n            <Felt onClick={() => props.onClick(1)} Value={props.rounds?.[1].toString()} />\r\n            <Felt onClick={() => props.onClick(2)} Value={props.rounds?.[2].toString()} />\r\n            <Felt onClick={() => props.onClick(3)} Value={props.rounds?.[3].toString()} />\r\n            <Felt onClick={() => props.onClick(4)} Value={props.rounds?.[4].toString()} />\r\n            <Felt onClick={() => props.onClick(5)} Value={props.rounds?.[5].toString()} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LæsRække(props) {\r\n    return (\r\n        <div className=\"række\">\r\n            <span className=\"etiket\"> {props.Slags}</span>\r\n            <Felt Value={props.Tal[0]}> </Felt>\r\n            <Felt Value={props.Tal[1]}> </Felt>\r\n            <Felt Value={props.Tal[2]}> </Felt>\r\n            <Felt Value={props.Tal[3]}> </Felt>\r\n            <Felt Value={props.Tal[4]}> </Felt>\r\n            <Felt Value={props.Tal[5]}> </Felt>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Mellemrum(props) {\r\n    return (\r\n        <div className=\"mellemrum\">\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Navne(props) {\r\n    return (\r\n        <div className=\"øverst\">\r\n            <span className=\"etiket\"> Navn</span>\r\n            <input type=\"text\" className={props.playerId === 0 ? \"felt navn valgt\" : \"felt navn\"}></input>\r\n            <input type=\"text\" className={props.playerId === 1 ? \"felt navn valgt\" : \"felt navn\"}></input>\r\n            <input type=\"text\" className={props.playerId === 2 ? \"felt navn valgt\" : \"felt navn\"}></input>\r\n            <input type=\"text\" className={props.playerId === 3 ? \"felt navn valgt\" : \"felt navn\"}></input>\r\n            <input type=\"text\" className={props.playerId === 4 ? \"felt navn valgt\" : \"felt navn\"}></input>\r\n            <input type=\"text\" className={props.playerId === 5 ? \"felt navn valgt\" : \"felt navn\"}></input>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction Felt(props) {\r\n    return (\r\n        <button\r\n            className=\"felt\"\r\n            onClick={props.onClick}\r\n        >\r\n            {props.Value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var player = 0;\r\n        let sets = Array(6).fill(null).map(() => new YatzySet(player++));\r\n        for (let index = 1; index < sets.length; index++) {\r\n            const left = sets[index-1];\r\n            const right = sets[index];\r\n            left.right = right;\r\n            right.left = left;\r\n        }\r\n        this.state = {\r\n            YatzySets: sets,\r\n            currentSet: sets[0],\r\n            currentRound: sets[0].round(0),\r\n\r\n        }\r\n    }\r\n\r\n    handleClick(player, round) {\r\n        console.log(\"Call back player: \" + player + \" round: \" + round);\r\n        var set = this.state.YatzySets[player];\r\n        var round = set.round(round);\r\n        this.setState({\r\n            YatzySets: this.state.YatzySets,\r\n            currentSet: set,\r\n            currentRound: round\r\n        });\r\n    }\r\n\r\n    rowFunc(round) {\r\n        return (player) => this.handleClick(player, round)\r\n    }\r\n\r\n    rowRounds(i) {\r\n        let result = this.state.YatzySets.map(ys => ys.round(i));\r\n        return result;\r\n    }\r\n\r\n    addDice(i) {\r\n        this.state.currentRound.add(i);\r\n        this.setState(this.state);\r\n    }\r\n\r\n    removeDice() {\r\n        console.log(\"Back\");\r\n        this.state.currentRound.back();\r\n        this.setState(this.state);\r\n    }\r\n\r\n    scratch() {\r\n        console.log(\"Scratch\");\r\n        this.state.currentRound.scratch();\r\n        this.setState(this.state);\r\n\r\n    }\r\n\r\n    terning(i) {\r\n        return <button className=\"terning\" disabled={!this.state.currentRound.canBeNext(i)} onClick={() => this.addDice(i)}>{i}</button>\r\n\r\n    }\r\n\r\n    række(round, slags) {\r\n        return <Række Slags={slags}\r\n            onClick={this.rowFunc(round)} rounds={this.rowRounds(round)}\r\n            available={this.state.currentSet.rounds[round].blank()}\r\n            valgt={this.state.currentRound == this.state.currentSet.rounds[round]} />\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"blok\">\r\n                    <Navne playerId={this.state.currentSet.anders()} />\r\n                    {this.række(0, \"1\")}\r\n                    {this.række(1, \"2\")}\r\n                    {this.række(2, \"3\")}\r\n                    {this.række(3, \"4\")}\r\n                    {this.række(4, \"5\")}\r\n                    {this.række(5, \"6\")}\r\n                    <Mellemrum />\r\n                    <LæsRække Slags=\"Bonus\" Tal={this.state.YatzySets.map(ys => ys.bonus())}></LæsRække>\r\n                    <Mellemrum />\r\n                    {this.række(6, \"1 par\")}\r\n                    {this.række(7, \"2 par\")}\r\n                    {this.række(8, \"3 par\")}\r\n                    {this.række(9, \"3 ens\")}\r\n                    {this.række(10, \"4 ens\")}\r\n                    {this.række(11, \"2 x 3 ens\")}\r\n                    {this.række(12, \"Lav\")}\r\n                    {this.række(13, \"Høj\")}\r\n                    {this.række(14, \"Cameron\")}\r\n                    {this.række(15, \"Hus\")}\r\n                    {this.række(16, \"Chance\")}\r\n                    {this.række(17, \"Yatzy\")}\r\n                    <Mellemrum />\r\n                    <LæsRække Slags=\"Total\" Tal={this.state.YatzySets.map(ys => ys.score())}></LæsRække>\r\n\r\n                </div>\r\n                <div className=\"nederst\">\r\n                    <div className=\"slag\">\r\n                        {this.state.currentRound.toArray()}\r\n                    </div>\r\n                    <div className=\"knaplinje\">\r\n                        {this.terning(1)}\r\n                        {this.terning(2)}\r\n                        {this.terning(3)}\r\n                        {this.terning(4)}\r\n                        {this.terning(5)}\r\n                        {this.terning(6)}\r\n                        <button className=\"terning\" onClick={() => this.scratch()}>X</button>\r\n                        <button className=\"terning\" disabled={this.state.currentRound.blank()} onClick={() => this.removeDice()}>&lt;</button>\r\n                        <FullScreenToggle />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst screenfull = require('screenfull');\r\n\r\nclass FullScreenToggle extends React.Component {\r\n    componentDidMount() {\r\n        if (screenfull.isEnabled) {\r\n            screenfull.on('change', () => {\r\n                //   console.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');\r\n            });\r\n        }\r\n    }\r\n\r\n    // enabling fullscreen has to be done after some user input\r\n    toggleFullScreen = () => {\r\n        if (screenfull.isEnabled) {\r\n            screenfull.toggle();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"terning\" onClick={this.toggleFullScreen}>&#x26F6; </button>\r\n        )\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Board />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     window.addEventListener('beforeunload', this.beforeunload.bind(this));\r\n    // }\r\n\r\n    // componentWillUnmount() {\r\n    //     window.removeEventListener('beforeunload', this.beforeunload.bind(this));\r\n    // }\r\n\r\n    // beforeunload(e) {\r\n    //     console.log('Before unload');\r\n    //     e.preventDefault();\r\n    //     e.returnValue = true;\r\n    // }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}